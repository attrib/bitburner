/**
 * Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:

    [
        [34, 1,42,18,14,33,11,34,32,16,13]
        [41, 8, 6, 2,49, 1,40,24,47,19, 9]
        [11,28, 6, 3,23,27,19,38,47,49, 3]
        [47,12,41,48, 3,44,12,10,41,31,24]
        [48,10,19,44, 6,11,20,47,50,34,11]
        [14,27, 2, 8,40,36,50,36,49, 2,42]
        [43, 8,37,17,32,24,38, 2,37,38,19]
        [12,35,48,22,26,39, 4,31,33,30,14]
        [24,19,45,45,20, 6,29,15,45, 1, 6]
        [44,18, 4,31, 8,50,23,44,17,16,31]
        [21,30,27,21, 6,18,24,29,50,21,27]
        [33,11,31,16,17,26,28,33, 5,36,13]
        [22,28,38,21,22, 9,24,22,17,33,40]
        [43,27,25, 4,25,31,15,36,23,29, 3]
    ]

Here is an example of what spiral order should be:

     [
         [1, 2, 3]
         [4, 5, 6]
         [7, 8, 9]
     ]

 Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]

 Note that the matrix will not always be square:

     [
         [1,  2,  3,  4]
         [5,  6,  7,  8]
         [9, 10, 11, 12]
     ]

 Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
 */
export function solve(contract, ns) {
    /** @type array */
    const data = contract.data
    let result = []

    while (data.length > 0) {
        result = [...result, ...data.shift()]
        if (data.length == 0) {
            break
        }

        for (let i = 0; i < data.length; i++) {
            if (data[i].length == 0) {
                break
            }
            result.push(data[i].pop())
        }
        if (data.length == 0) {
            break
        }

        result = [...result, ...data.pop().reverse()]
        if (data.length == 0) {
            break
        }

        for (let i = data.length - 1; i >= 0; i--) {
            if (data[i].length == 0) {
                break
            }
            result.push(data[i].shift())
        }
    }

    return result
}

/**
 * 
 * [
 *  [34,1,42,18,14,33,11,34,32,16,13],
 *  [41,8,6,2,49,1,40,24,47,19,9],
 *  [11,28,6,3,23,27,19,38,47,49,3],
 *  [47,12,41,48,3,44,12,10,41,31,24],
 *  [48,10,19,44,6,11,20,47,50,34,11],
 *  [14,27,2,8,40,36,50,36,49,2,42],
 *  [43,8,37,17,32,24,38,2,37,38,19],
 *  [12,35,48,22,26,39,4,31,33,30,14],
 *  [24,19,45,45,20,6,29,15,45,1,6],
 *  [44,18,4,31,8,50,23,44,17,16,31],
 *  [21,30,27,21,6,18,24,29,50,21,27],
 *  [33,11,31,16,17,26,28,33,5,36,13],
 *  [22,28,38,21,22,9,24,22,17,33,40],
 *  [43,27,25,4,25,31,15,36,23,29,3]
 * ] 
 * 
 * [34,1,42,18,14,33,11,34,32,16,13,
 * 9,3,24,11,42,19,14,6,31,27,13,40,3,29,23,36,15,31,25,4,25,27,43,22,33,21,44,24,12,43,14,48,47,11,41,8,6,2,49,1,40,24,47,19,49,31,34,2,38,30,1,16,21,36,33,17,22,24,9,22,21,38,28,11,30,18,19,35,8,27,10,12,28,6,3,23,27,19,38,47,41,50,49,37,33,45,17,50,5,33,28,26,17,16,31,27,4,45,48,37,2,19,41,48,3,44,12,10,47,36,2,31,15,44,29,24,18,6,21,31,45,22,17,8,44,6,11,20,50,38,4,29,23,50,8,20,26,32,40,36,24,39,6,null,null,null]
 * 
 */